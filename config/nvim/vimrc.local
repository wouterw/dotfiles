set encoding=utf-8

" Enable true colors
set termguicolors

" Color scheme
let g:one_allow_italics = 1
colorscheme one

" Background color
set background=light

" Lighter sign column
highlight SignColumn guibg=mono1

" Relative line numbers
set relativenumber

" Highlight all matches after entering search pattern
set hlsearch

" Automatically update file unless buffer has unsaved changes
set autoread

" Case insensitive pattern matching
set ignorecase

" Overrides ignorecase if pattern contains upcase
set smartcase

" When at 3 spaces and I hit >>, go to 4, not 5
set shiftround

" Keep 5 lines of context when scrolling
set scrolloff=5

" Live preview substitute (neovim)
set inccommand=split

" Don't add the comment prefix when I hit enter or o/O on a comment line.
autocmd FileType * setlocal formatoptions-=c formatoptions-=r formatoptions-=o

" Move one displayed line at a time, default is one fysical line
nmap k gk
nmap j gj

" Bind K to grep word under cursor
nnoremap K :grep! "\b<C-R><C-W>\b"<CR>:cw<CR>

" Bind \ (backward slash) to grep shortcut
" command -nargs=+ -complete=file -bar Ag silent! grep! <args>|cwindow|redraw!
" nnoremap \ :Ag<SPACE>

" Complete terms from all buffers
set complete=.,w,b,u,t,i

" Disable Ex mode
map Q <Nop>

" Allow undo history to persist after closing buffer
if has("persistent_undo")
  set undodir=~/.vim/_undo
  set undofile
end

" Shortcuts
map <C-n> :NERDTreeToggle<CR>
map <C-t> <esc>:tabnew<CR>
map <C-s> <esc>:w<CR>
imap <C-s> <esc>:w<CR>
nmap <Leader>d :Dispatch 

" Embrace typos
command! Q q
command! W w
command! Wq wq

" Mustache
au BufRead,BufNewFile *.{mustache,handlebars,hbs}{,.erb} set filetype=html syntax=mustache

" JSX
au BufRead,BufNewFile *.{js,jsx} set filetype=javascript syntax=javascript.jsx

" CocoaPods
au BufRead,BufNewFile Podfile,*.podspec set filetype=ruby

" Make Prettier power the gq command for automatic formatting
autocmd FileType javascript set formatprg=prettier\ --stdin
autocmd BufWritePre *.js :normal gggqG

" vim-jsx
let g:jsx_ext_required = 0

" ctrlp
if executable('rg')
  let g:ctrlp_user_command = 'rg --files %s'
  let g:ctrlp_use_caching = 0
endif

" grep
if executable('rg')
  set grepprg=rg\ --vimgrep\ --no-heading
  set grepformat=%f:%l:%c:%m,%f:%l:%m
endif

" neomake
autocmd! BufWritePost * Neomake

hi neomakeErrorMsg ctermbg=0 ctermfg=1
hi neomakeWarningMsg ctermbg=0 ctermfg=3

" Look for local eslint and if not use globally installed one
let g:eslint_path = system('PATH=$(npm bin):$PATH && which eslint')
let g:neomake_javascript_eslint_exe=substitute(g:eslint_path, '^\n*\s*\(.\{-}\)\n*\s*$', '\1', '')

let g:neomake_error_sign = { 'text': '¬ª', 'texthl': 'neomakeErrorMsg' }
let g:neomake_warning_sign = { 'text': '¬ª', 'texthl': 'neomakeWarningMsg' }

" airline
let g:airline_theme='one'
let g:airline_powerline_fonts = 1

" if !exists('g:airline_symbols')
"   let g:airline_symbols = {}
" endif

" let g:airline_left_sep = ''
" let g:airline_left_alt_sep = ''
" let g:airline_right_sep = ''
" let g:airline_right_alt_sep = ''
" let g:airline_symbols.crypt = 'üîí'
" let g:airline_symbols.linenr = '‚êä'
" let g:airline_symbols.linenr = '‚ê§'
" let g:airline_symbols.linenr = '¬∂'
" let g:airline_symbols.maxlinenr = '‚ò∞'
" let g:airline_symbols.maxlinenr = ''
" let g:airline_symbols.branch = '‚éá'
" let g:airline_symbols.paste = 'œÅ'
" let g:airline_symbols.paste = '√û'
" let g:airline_symbols.paste = '‚à•'
" let g:airline_symbols.spell = 'Íû®'
" let g:airline_symbols.notexists = '‚àÑ'
" let g:airline_symbols.whitespace = 'Œû'

" neovim
let $NVIM_TUI_ENABLE_TRUE_COLOR=1
let $NVIM_TUI_ENABLE_CURSOR_SHAPE=1
